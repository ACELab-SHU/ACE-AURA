/**
 * ****************************************
 * @file        Task_iBar_SSB_Search.c
 * @brief       SSB index search by dmrs channel estimate
 * @author      yuanfeng
 * @date        2024.6.3
 * @copyright   ACE-Lab(Shanghai University)
 * ****************************************
 */
#include <stdint.h>

#include "riscv_printf.h"
#include "venus.h"

typedef short __v2048i16 __attribute__((ext_vector_type(2048)));
typedef short __v4096i16 __attribute__((ext_vector_type(4096)));
typedef char  __v4096i8 __attribute__((ext_vector_type(4096)));

#define LEFT_SHIFT  0
#define RIGHT_SHIFT 1
VENUS_INLINE __v2048i16 cyclic_shift_2048_16(__v2048i16 tgtvec, int shift_length, int shift_direction,
                                             int vectorLength) {
  __v2048i16 result;
  __v2048i16 tmp_index;
  vclaim(tmp_index);
  __v2048i16 tmp_1;
  vclaim(tmp_1);
  vbrdcst(tmp_1, vectorLength, MASKREAD_OFF, vectorLength);
  vrange(tmp_index, vectorLength);
  tmp_index = vsadd(tmp_index, shift_direction == LEFT_SHIFT ? shift_length : (vectorLength - shift_length),
                    MASKREAD_OFF, vectorLength);
  tmp_index = vrem(tmp_1, tmp_index, MASKREAD_OFF, vectorLength);
  vclaim(result);
  vshuffle(result, tmp_index, tgtvec, SHUFFLE_GATHER, vectorLength);
  // vshuffle(retvec, tmp_index, tgtvec, SHUFFLE_GATHER, vectorLength);
  return result;
}

VENUS_INLINE __v4096i8 cyclic_shift_4096_8(__v4096i8 tgtvec, int shift_length, int shift_direction, int vectorLength) {
  __v4096i8  result;
  __v2048i16 tmp_index;
  vclaim(tmp_index);
  __v2048i16 tmp_1;
  vclaim(tmp_1);
  vbrdcst(tmp_1, vectorLength, MASKREAD_OFF, vectorLength);
  vrange(tmp_index, vectorLength);
  tmp_index = vsadd(tmp_index, shift_direction == LEFT_SHIFT ? shift_length : (vectorLength - shift_length),
                    MASKREAD_OFF, vectorLength);
  tmp_index = vrem(tmp_1, tmp_index, MASKREAD_OFF, vectorLength);
  vclaim(result);
  vshuffle(result, tmp_index, tgtvec, SHUFFLE_GATHER, vectorLength);
  // vshuffle(retvec, tmp_index, tgtvec, SHUFFLE_GATHER, vectorLength);
  return result;
}

VENUS_INLINE __v4096i16 cyclic_shift_4096_16(__v4096i16 tgtvec, int shift_length, int shift_direction,
                                             int vectorLength) {
  __v4096i16 result;
  __v4096i16 tmp_index;
  vclaim(tmp_index);
  __v4096i16 tmp_1;
  vclaim(tmp_1);
  vbrdcst(tmp_1, vectorLength, MASKREAD_OFF, vectorLength);
  vrange(tmp_index, vectorLength);
  tmp_index = vsadd(tmp_index, shift_direction == LEFT_SHIFT ? shift_length : (vectorLength - shift_length),
                    MASKREAD_OFF, vectorLength);
  tmp_index = vrem(tmp_1, tmp_index, MASKREAD_OFF, vectorLength);
  vclaim(result);
  vshuffle(result, tmp_index, tgtvec, SHUFFLE_GATHER, vectorLength);
  // vshuffle(retvec, tmp_index, tgtvec, SHUFFLE_GATHER, vectorLength);
  return result;
}

// nrPBCHDMRS parameter
// short seq1[288] = {
//     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,
//     0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,
//     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,
//     0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1,
//     0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
//     0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1,
//     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0,
//     0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1,
//     0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
//     1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
//     1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
//     1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1};

// short seq2_init_table_0[31] = {1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 0, 0, 1, 2,
// 0,
//                                1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 0, 0};
// short seq2_init_table_1[31] = {2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 1, 5, 6, 7,
// 1,
//                                2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 4, 2};
// short seq2_init_table_2[31] = {3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 2, 6, 7, 8,
// 2,
//                                3, 4, 5, 2, 3, 4, 5, 2,  3, 4, 5, 6, 2, 6, 3};
// short seq2_init_table_3[31] = {8, 9, 10, 11, 12, 13, 14, 15, 3, 4, 5,
//                                4, 7, 8,  9,  8,  9,  10, 11, 3, 4, 5,
//                                6, 3, 4,  5,  6,  7,  3,  7,  5};
// short seq2_init_table_4[31] = {12, 13, 14, 15, 16, 17, 18, 19, 9, 10, 11,
//                                5,  13, 14, 15, 9,  10, 11, 12, 4, 5,  6,
//                                7,  4,  5,  6,  7,  8,  5,  8,  7};
// short seq2_init_table_5[31] = {16, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12,
//                                6,  14, 15, 16, 10, 11, 12, 13, 5,  6,  7,
//                                8,  5,  6,  7,  8,  9,  6,  9,  8};
// short seq2_init_table_6[31] = {19, 20, 21, 22, 23, 24, 25, 26, 11, 12, 13,
//                                12, 15, 16, 17, 16, 17, 18, 19, 6,  7,  8,
//                                9,  6,  7,  8,  9,  10, 7,  10, 9};
// short seq2_init_table_7[31] = {20, 21, 22, 23, 24, 25, 26, 27, 16, 17, 18,
//                                13, 20, 21, 22, 17, 18, 19, 20, 12, 13, 14,
//                                15, 7,  8,  9,  10, 11, 8,  11, 10};
// short seq2_init_table_8[31] = {23, 24, 25, 26, 27, 28, 29, 30, 20, 21, 22,
//                                14, 24, 25, 26, 18, 19, 20, 21, 13, 14, 15,
//                                16, 8,  9,  10, 11, 12, 9,  12, 11};
// short seq2_init_table_9[31] = {31, 31, 31, 31, 31, 31, 31, 31, 24, 25, 26,
//                                19, 28, 29, 30, 23, 24, 25, 26, 14, 15, 16,
//                                17, 9,  10, 11, 12, 13, 10, 13, 12};
// short seq2_init_table_10[31] = {31, 31, 31, 31, 31, 31, 31, 31, 27, 28, 29,
//                                 23, 31, 31, 31, 27, 28, 29, 30, 20, 21, 22,
//                                 23, 10, 11, 12, 13, 14, 11, 14, 13};
// short seq2_init_table_11[31] = {31, 31, 31, 31, 31, 31, 31, 31, 28, 29, 30,
//                                 27, 31, 31, 31, 31, 31, 31, 31, 21, 22, 23,
//                                 24, 16, 17, 18, 19, 20, 12, 15, 14};
// short seq2_init_table_12[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 30, 31, 31, 31, 31, 31, 31, 31, 22, 23, 24,
//                                 25, 17, 18, 19, 20, 21, 13, 16, 15};
// short seq2_init_table_13[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 27, 28, 29,
//                                 30, 18, 19, 20, 21, 22, 14, 22, 16};
// short seq2_init_table_14[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 24, 25, 26, 27, 28, 15, 23, 17};
// short seq2_init_table_15[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 25, 26, 27, 28, 29, 21, 24, 23};
// short seq2_init_table_16[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 26, 27, 28, 29, 30, 22, 30, 24};
// short seq2_init_table_17[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 23, 31, 25};
// short seq2_init_table_18[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 29, 31, 31};
// short seq2_init_table_19[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 30, 31, 31};

// short seq2_trans_table_0[31] = {0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,
//                                 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
//                                 22, 23, 24, 25, 26, 27, 0,  0,  0};
// short seq2_trans_table_1[31] = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11,
//                                 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
//                                 23, 24, 25, 26, 27, 28, 1,  4,  2};
// short seq2_trans_table_2[31] = {2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12,
//                                 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
//                                 24, 25, 26, 27, 28, 29, 2,  29, 3};
// short seq2_trans_table_3[31] = {3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13,
//                                 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
//                                 25, 26, 27, 28, 29, 30, 3,  30, 5};
// short seq2_trans_table_4[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 28, 31, 30};
// short seq2_trans_table_5[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 29, 31, 31};
// short seq2_trans_table_6[31] = {31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
//                                 31, 31, 31, 31, 31, 31, 30, 31, 31};

// short init2[31 + 1] = {0};
int tabLength = 31;
#define recpSqrt2 0.70710678

// nrPBCHChannelEstimate parameter
short subcarrierLength = 240;
short dmrs_interval    = 4;
// char input_rxData_real[720] = {
//     -128, 127,  127,  -128, -128, -128, 127,  127,  127,  -128, 127,  127,
//     -128, -128, -128, 127,  127,  127,  127,  -128, 127,  -128, -128, -128,
//     -128, -128, 127,  127,  -128, 127,  -128, -128, 127,  -128, -128, -128,
//     127,  127,  -128, -128, 127,  127,  -128, 127,  127,  -128, -128, 127,
//     127,  127,  -128, 127,  -128, -128, -128, -128, 127,  127,  -128, 127,
//     -128, 127,  127,  127,  -128, -128, -128, 127,  -128, -128, -128, -128,
//     -128, 127,  -128, 127,  -128, -128, 127,  127,  127,  -128, -128, 127,
//     -128, -128, 127,  127,  -128, 127,  -128, -128, 127,  127,  -128, 127,
//     127,  127,  127,  127,  127,  -128, 127,  -128, 127,  -128, 127,  -128,
//     -128, -128, 127,  127,  -128, 127,  -128, 127,  -128, -128, 127,  127,
//     127,  127,  -128, 127,  -128, -128, 127,  -128, -128, -128, 127,  -128,
//     -128, 127,  -128, 127,  -128, -128, 127,  127,  127,  127,  127,  127,
//     127,  -128, 127,  127,  -128, 127,  127,  127,  127,  127,  127,  -128,
//     127,  -128, 127,  -128, -128, -128, -128, 127,  -128, -128, 127,  127,
//     127,  127,  -128, 127,  -128, -128, -128, 127,  127,  -128, 127,  127,
//     127,  -128, 127,  -128, -128, 127,  127,  127,  127,  -128, -128, -128,
//     -128, -128, 127,  -128, 127,  -128, 127,  -128, -128, 127,  127,  127,
//     127,  -128, 127,  127,  -128, 127,  -128, -128, 127,  -128, 127,  127,
//     -128, 127,  127,  -128, 127,  127,  -128, 127,  127,  -128, -128, -128,
//     127,  -128, 127,  -128, 127,  127,  -128, 127,  -128, -128, -128, 127,
//     127,  127,  -128, -128, -128, 127,  -128, 127,  -128, -128, -128, 127,
//     127,  -128, -128, 127,  127,  -128, 127,  127,  127,  -128, 127,  -128,
//     127,  -128, -128, -128, -128, -128, 127,  127,  -128, 127,  127,  127,
//     127,  127,  -128, -128, -128, 127,  127,  127,  127,  127,  -128, 127,
//     -128, -128, 127,  -128, 127,  127,  -128, -128, 127,  127,  -128, 127,
//     127,  -128, -128, 127,  -128, -128, 127,  127,  -128, 127,  127,  -128,
//     127,  -128, -128, -128, 127,  127,  127,  127,  127,  -128, 127,  127,
//     127,  127,  -128, -128, 127,  127,  127,  -128, -128, -128, 127,  -128,
//     -128, 127,  127,  -128, -128, 127,  127,  127,  127,  -128, 127,  -128,
//     -128, 127,  -128, 127,  -128, 127,  -128, 127,  127,  -128, -128, 127,
//     -128, 127,  127,  -128, -128, -128, -128, 127,  -128, 127,  127,  127,
//     -128, 127,  -128, -128, 127,  127,  -128, 127,  127,  127,  127,  -128,
//     -128, 127,  127,  -128, -128, 127,  127,  127,  127,  -128, 127,  127,
//     -128, 127,  127,  127,  -128, 127,  -128, 127,  127,  127,  -128, -128,
//     -128, -128, -128, 127,  -128, -128, 127,  127,  -128, 127,  -128, -128,
//     -128, 127,  127,  -128, -128, -128, -128, 127,  127,  127,  127,  127,
//     127,  127,  127,  -128, 127,  -128, -128, 127,  127,  -128, -128, -128,
//     127,  -128, -128, 127,  127,  -128, 127,  127,  127,  -128, -128, 127,
//     127,  -128, 127,  -128, -128, -128, -128, 127,  127,  127,  -128, -128,
//     -128, 127,  127,  -128, 127,  -128, 127,  -128, 127,  127,  -128, 127,
//     127,  -128, -128, 127,  -128, -128, -128, -128, 127,  -128, 127,  -128,
//     -128, -128, 127,  -128, -128, -128, -128, 127,  -128, 127,  -128, -128,
//     -128, -128, -128, -128, -128, -128, -128, 127,  -128, -128, 127,  -128,
//     -128, -128, -128, -128, -128, -128, -128, 127,  -128, 127,  -128, -128,
//     127,  127,  127,  127,  -128, 127,  127,  -128, 127,  -128, 127,  -128,
//     127,  127,  127,  127,  -128, 127,  -128, 127,  127,  -128, 127,  127,
//     -128, 127,  -128, 127,  -128, 127,  127,  -128, 127,  -128, -128, -128,
//     127,  -128, 127,  -128, -128, -128, 127,  127,  -128, -128, 127,  -128,
//     -128, -128, 127,  127,  127,  127,  127,  -128, -128, -128, 127,  -128,
//     -128, -128, 127,  127,  127,  127,  127,  127,  -128, -128, 127,  127,
//     -128, 127,  -128, 127,  127,  127,  127,  127,  127,  -128, -128, 127,
//     127,  127,  -128, 127,  127,  127,  127,  -128, -128, 127,  -128, -128,
//     127,  127,  127,  127,  127,  -128, 127,  -128, -128, 127,  -128, 127,
//     -128, 127,  127,  127,  127,  -128, -128, -128, -128, 127,  -128, -128,
//     -128, 127,  -128, 127,  127,  127,  127,  127,  127,  -128, -128, -128,
//     -128, 127,  -128, 127,  -128, 127,  -128, -128, -128, 127,  127,  -128,
//     -128, 127,  127,  127,  127,  -128, -128, -128, 127,  -128, 127,  127,
//     -128, 127,  -128, -128, 127,  -128, 127,  127,  -128, 127,  127,  -128,
//     -128, -128, -128, -128, 127,  127,  127,  -128, 127,  127,  -128, -128,
//     -128, 127,  -128, 127,  -128, -128, 127,  -128, -128, -128, -128, 127};
// char input_rxData_imag[720] = {
//     127,  127,  127,  -128, 127,  127,  -128, -128, -128, -128, -128, -128,
//     127,  127,  -128, -128, -128, -128, 127,  -128, -128, 127,  127,  -128,
//     127,  -128, -128, 127,  -128, -128, 127,  127,  127,  127,  127,  127,
//     -128, 127,  127,  127,  -128, 127,  127,  -128, -128, -128, 127,  -128,
//     127,  -128, -128, -128, 127,  127,  127,  127,  127,  127,  127,  127,
//     -128, 127,  -128, -128, 127,  -128, 127,  -128, 127,  127,  127,  127,
//     127,  127,  -128, -128, 127,  127,  -128, -128, -128, 127,  -128, -128,
//     127,  127,  -128, 127,  -128, -128, 127,  127,  -128, -128, 127,  -128,
//     127,  127,  -128, 127,  127,  127,  127,  127,  127,  127,  127,  -128,
//     -128, -128, 127,  -128, -128, 127,  127,  -128, -128, 127,  127,  -128,
//     127,  127,  -128, -128, -128, -128, -128, -128, 127,  -128, 127,  -128,
//     -128, -128, -128, 127,  127,  -128, 127,  -128, -128, 127,  127,  -128,
//     127,  127,  -128, 127,  -128, -128, 127,  -128, 127,  127,  127,  127,
//     -128, 127,  127,  -128, -128, 127,  127,  127,  127,  127,  127,  127,
//     127,  -128, 127,  -128, -128, 127,  127,  -128, -128, 127,  -128, 127,
//     127,  -128, 127,  127,  127,  -128, -128, 127,  127,  -128, -128, 127,
//     127,  -128, -128, 127,  -128, 127,  -128, -128, -128, 127,  127,  127,
//     127,  127,  127,  127,  -128, -128, 127,  -128, 127,  -128, -128, -128,
//     127,  -128, -128, 127,  -128, -128, -128, -128, -128, 127,  -128, 127,
//     -128, -128, -128, 127,  127,  -128, -128, 127,  -128, 127,  127,  -128,
//     127,  127,  127,  -128, 127,  127,  127,  -128, -128, -128, 127,  127,
//     127,  -128, -128, 127,  -128, -128, -128, -128, 127,  -128, 127,  -128,
//     127,  -128, 127,  -128, 127,  127,  -128, -128, -128, 127,  127,  127,
//     127,  127,  -128, -128, 127,  -128, -128, -128, 127,  -128, 127,  127,
//     -128, -128, 127,  -128, 127,  127,  127,  127,  127,  127,  -128, 127,
//     127,  -128, -128, 127,  -128, -128, 127,  127,  -128, 127,  127,  -128,
//     127,  -128, -128, -128, 127,  127,  127,  127,  127,  -128, 127,  127,
//     127,  127,  -128, -128, 127,  127,  127,  -128, -128, -128, 127,  -128,
//     -128, 127,  127,  -128, -128, 127,  127,  127,  127,  -128, 127,  -128,
//     -128, 127,  -128, 127,  -128, 127,  -128, 127,  127,  -128, -128, 127,
//     127,  127,  127,  -128, -128, -128, -128, 127,  -128, 127,  127,  127,
//     -128, 127,  -128, -128, 127,  127,  -128, 127,  127,  127,  127,  -128,
//     -128, 127,  127,  -128, -128, 127,  127,  127,  127,  -128, 127,  127,
//     -128, 127,  127,  127,  -128, 127,  -128, 127,  127,  127,  -128, -128,
//     -128, -128, -128, 127,  -128, -128, 127,  127,  -128, 127,  -128, -128,
//     -128, 127,  127,  127,  -128, 127,  127,  -128, -128, -128, 127,  127,
//     -128, -128, 127,  127,  127,  -128, -128, 127,  -128, 127,  -128, 127,
//     -128, 127,  127,  -128, -128, -128, 127,  127,  -128, -128, 127,  -128,
//     127,  -128, -128, -128, 127,  -128, 127,  -128, -128, -128, 127,  -128,
//     127,  127,  127,  127,  -128, 127,  127,  -128, -128, 127,  -128, 127,
//     127,  127,  127,  -128, -128, -128, 127,  -128, -128, -128, -128, -128,
//     127,  -128, 127,  -128, 127,  127,  127,  -128, -128, 127,  127,  127,
//     -128, -128, -128, 127,  127,  -128, 127,  127,  127,  127,  -128, -128,
//     127,  127,  127,  127,  127,  -128, -128, 127,  127,  -128, 127,  127,
//     -128, 127,  127,  -128, -128, 127,  -128, -128, -128, -128, 127,  127,
//     -128, -128, 127,  127,  -128, 127,  127,  127,  127,  127,  -128, 127,
//     -128, -128, -128, -128, 127,  -128, -128, -128, 127,  127,  -128, 127,
//     127,  127,  -128, 127,  127,  127,  -128, 127,  -128, -128, 127,  127,
//     -128, 127,  -128, -128, -128, -128, 127,  127,  -128, -128, 127,  -128,
//     127,  -128, -128, -128, 127,  127,  127,  -128, 127,  -128, -128, 127,
//     127,  -128, -128, -128, 127,  -128, 127,  -128, -128, -128, 127,  -128,
//     127,  -128, -128, -128, 127,  127,  -128, -128, 127,  -128, 127,  -128,
//     127,  127,  127,  -128, 127,  127,  -128, 127,  -128, -128, -128, -128,
//     127,  127,  -128, -128, 127,  127,  127,  -128, -128, -128, -128, 127,
//     -128, -128, 127,  -128, -128, 127,  -128, -128, 127,  127,  127,  127,
//     -128, 127,  127,  127,  -128, 127,  -128, -128, 127,  -128, 127,  127,
//     127,  127,  -128, -128, -128, -128, 127,  127,  127,  -128, -128, -128,
//     127,  -128, -128, 127,  127,  127,  -128, -128, -128, -128, -128, -128,
//     -128, -128, -128, -128, 127,  -128, -128, 127,  127,  127,  -128, -128,
//     -128, 127,  127,  127,  -128, 127,  127,  127,  -128, 127,  -128, 127};
// // char input_rxData_real[720] = {
// //     47,  -62, -63, -66, -64, -63, -65, 46,  -65, 43,  47,  -64, -58, -63,
// 51,
// //     56,  -56, -58, 58,  -51, 59,  55,  63, -44, -48, 65,  62,  -42, -42,
// 68,
// //     67,  67,  -48, 64,  65,  -44, 62,  64,  -44, 62,  59,  61,  -43, 58,
// -51,
// //     62, -50, -50, 56,  63,  -55, -46, 56,  -53, 51,  64,  58,  60,  52,
// -58,
// //     51,  -57, -60, 59,  -64, -65, 47,  -66, 54, -64, -66, 53,  -64, 41,
// -55,
// //     42,  -53, -51, -64, 57,  59,  59,  46,  -61, -47, -49, 50,  -46, -62,
// 62,
// //     -61, 58, -49, 40,  56,  -72, -58, -58, 49,  -78, -60, -61, -77, 50,
// -76,
// //     -56, -73, -69, 58,  43,  62,  46,  -61, -41, 70, 53,  -36, -37, 56,
// -36,
// //     41,  75,  -56, 70,  48,  63,  -64, 61,  63,  -70, -50, -73, -53, -72,
// 57,
// //     -49, 38, -49, -68, 64,  -62, 43,  44,  -41, 66,  67,  -43, 41,  -40,
// 62,
// //     -66, -47, -69, -46, -52, 59,  -49, 58,  34,  -74, -76, 57,  -74, -72,
// //     -69, 61,  40,  37,  -67, 39,  -41, -68, -42, 39,  61,  36,  37,  -47,
// //     -47, -49, -52, -77, -53, -54, 24,  -81, 50,  -52, -84, -52, 28,  25,
// -81,
// //     -49, -77, 56,  -48, -79, -47, -50, -51, 23,  -78, 54,  22, -50, -83,
// 23,
// //     -80, -83, -53, -54, -50, -78, -81, 25,  -76, -42, -44, 30,  31,  34,
// 63,
// //     30,  -77, -44, -80, 25, -47, -51, -54, -90, -54, -57, -93, -90, -92,
// -92,
// //     -55, -88, 64,  41,  -65, 40,  40,  66,  -40, -41, -40, 37, -70, -41,
// 65,
// //     -69, -40, -63, -69, -69, -71, 41,  -38, 38,  -42, 39,  36,  38,  38,
// 69,
// //     -66, -66, -40, -37, 35,  39, -67, 66, -36, -68, 36,  -37, -67, -69,
// 34,
// //     -69, -65, -39, 39,  -40, -1,  -1,  -1,  0,   0,   -1,  -1,  0,   72,
// 73,
// //     74, 75,  74,  72,  74,  74,  76,  72,  -76, 73,  71,  72,  73,  75,
// -75,
// //     71,  70,  75,  -72, 73,  -75, 72, -76, 72, 73,  -75, -73, 71,  71, 73,
// //     -71, -72, -73, 75,  -73, 73,  -76, 74,  73,  74,  73,  71,  70,  76,
// -72,
// //     -72, 72, 70,  75,  -73, 73,  -71, -74, -72, -71, -74, -69, -73, -73,
// 70,
// //     -74, 76,  49,  -73, 71,  67,  72,  72, -69, 72, -70, -70, 74,  -68,
// -73,
// //     71,  -74, 70,  -73, -69, -71, -73, 67,  69,  -73, -72, -73, -75, 70,
// 69,
// //     -69, -73, -70, -71, -70, 69,  69,  70,  -68, 72,  -74, 68,  69,  67,
// 72,
// //     68,  -70, -73, 67,  67,  72,  -71, 68,  66, 66,  -71, 70,  67,  -70,
// -71,
// //     -72, 67,  -70, -70, -71, -2,  -2,  0,   0,   -2,  -1,  0,   0,   -1,
// 22,
// //     74, -74, 22,  -74, 23,  72,  24,  -21, -74, 19,  22,  -74, 19,  -21,
// -21,
// //     72,  -75, 19,  -73, -73, -78, -21, -22, 19, -23, 76,  74, -75, -76,
// 76,
// //     77,  77,  -74, -19, 77,  15,  19,  76,  74,  -17, -17, -19, 17,  -21,
// //     -19, -17, 74,  -74, -74, -71, 72,  -72, 25,  23,  -74, 72,  22,  26,
// -74,
// //     26,  72,  -73, 72,  -74, 23,  72,  71,  73,  74,  27,  24, 76,  72,
// -76,
// //     75,  -74, -25, 74,  -73, -23, -22, 75,  -22, -73, 72,  77,  -22, 20,
// -21,
// //     73,  77,  -23, 18,  75, -21, 71, 17,  -21, -19, -76, -75, -20, -19,
// -73,
// //     -20, 18,  72,  -20, 74,  -20, 17,  74,  -17, 20,  17,  -76, -20, -74,
// 16,
// //     17,  -77, -75, -77, 21,  73,  17,  -19, -16, 16,  -76, -15, -15, -16,
// 16,
// //     -16, 77,  -19, -17, 13,  18, -19, 76, -78, 16,  78,  18,  72,  -75,
// -14,
// //     -78, 77,  -16, 13,  14,  13,  73,  -14, 77,  -76, -77, -77, 13,  76,
// 74,
// //     16, -18, 15,  -99, 76,  74,  11,  -15, 73,  -77, -11, 78,  -76, 9,
// -79,
// //     -12, 76,  -78, -10, -15, -78, -11, 9,   11, -12, 10,  7,   10,  -10,
// 8,
// //     74,  -76, 80,  -12, 76,  75,  9,   76,  -80, -79, -80, -75, 77,  -79,
// 6,
// //     -77, 75, 8,   -10, 11,  8,   8,   -7,  -75, 75,  79,  6,   6,   -80,
// 6,
// //     -9,  5,   -10, 6,   -8,  78,  4,   5, 5,   -79, 79,  78,  3,   4, -5,
// //     -7,  76,  -80, 78,  75,  -79, -7,  2,   78,  -79, -80, 77,  -78, 3, 1,
// //     2, 74,  -78, -78, 79,  78,  -1,  -1,  -3,  0,   1,   3,   1,   -79,
// 75,
// //     -5,  78,  -1,  76,  2,   -5,  0,   1, -75, 79,  -3, -1,  0,   -78, 2,
// 73,
// //     -76, -77};
// // char input_rxData_imag[720] = {
// //     -64, -62, -63, 50,  -58, -57, -54, -54, 52,  60,  58,  56,  -52, 58,
// 63,
// //     -51, 55,  56,  -54, -56, -55, 52, -60, -69, 41,  -66, 43,  -71, -76,
// -71,
// //     -72, -70, 33,  -69, -68, -74, -65, -65, -66, -59, 49,  52,  -63, 59,
// 52,
// //     -48, 56,  57,  69,  -40, 63,  -46, 72,  64,  70,  -35, -34, -36, 72,
// 65,
// //     70,  61,  59,  -38, 61,  61,  68,  59, -42, 56,  55,  -43, 54,  66,
// -58,
// //     61,  -57, -61, 50,  -50, -50, -49, 58,  43,  -69, -71, 51,  -73, 40,
// -61,
// //     37, -60, -77, 51,  -61, 33,  -75, -74, -57, 40,  -68, -68, 44,  -49,
// 47,
// //     -64, 45,  51,  -44, 65,  -44, 66,  46,  -61, -44, 59,  -63, -68, 62,
// -67,
// //     40,  -53, 35,  -52, 54,  -49, 37,  -50, -47, 43,  -66, 45,  -64, 48,
// -39,
// //     -64, 69, -65, 44,  -44, 40,  63,  56,  -76, -54, -52, -82, 52,  -81,
// -60,
// //     29,  -81, 32,  -77, -74, -50, -71, -41, 68,  46, 46, -32, 54,  53, 52,
// //     -26, 79,  80,  53,  74,  -57, 49,  -65, 68,  -41, 64,  63,  -76, -73,
// //     -73, -75, 32,  -74, -79, 56,  30,  -44, -71, 36,  -72, 66,  62,  36,
// -67,
// //     38,  -41, -67, 36,  -71, -68, -71, 62,  31,  -47, 61, -72, 32, 65, 37,
// //     36,  -68, -67, -63, 42,  47,  74,  45,  -62, -62, 79,  76,  72,  -34,
// 72,
// //     40,  -70, 34,  69,  -74, -73, -74, 32,  -72, -77, 29,  30,  28,  32,
// -72,
// //     32,  -41, 64,  37,  63,  63,  -39, -66, -71, -69, 64,  40, -65, -39,
// 40,
// //     -69, 40,  39,  39,  40,  65,  -64, 67,  -69, 63,  68,  65,  66,  -38,
// 38,
// //     38,  -65, -68, 67,  65,  36, -36, -67, 39,  69,  -66, 34,  39,  67,
// 40,
// //     35,  -66, 67,  -69, 2,   0,   1,   -1,  0,   -1,  -1,  -1,  22,  23,
// 22,
// //     20,  21,  24,  23,  22,  23,  24,  -23, 23,  25,  23,  27,  22,  -25,
// 24,
// //     28,  24,  -25, 24,  -25, 26,  -24, 27, 25,  -27, -28, 25,  26,  27,
// -27,
// //     -28, -27, 24,  -27, 28,  -24, 23,  26,  26,  26,  27,  27,  28,  -28,
// //     -29, 27, 29,  25,  -25, 27,  -30, -28, -30, -30, -27, -30, -29, -27,
// 28,
// //     -27, 28,  18,  -32, 27,  30,  29,  28,  -30, 28, -33, -32, 29,  -33,
// -30,
// //     29,  -29, 31,  -31, -32, -33, -31, 33,  33,  -32, -32, -33, -32, 31,
// 34,
// //     -33, -34, -34, -35, -34, 32,  34,  32,  -32, 29,  -33, 32,  31,  33,
// 33,
// //     34,  -36, -33, 34,  36,  34,  -34, 33,  35,  34, -34, 33,  34,  -34,
// -36,
// //     -35, 35,  -36, -37, -37, -1,  1,   -1,  0,   0,   -1,  -2,  -1,  0,
// 74,
// //     -25, 24,  70, 23, 74,  -19, 75,  -75, 18,  75,  75,  20,  75,  -75,
// -72,
// //     -20, 19,  71,  21,  21,  20,  -75, -73, 76,  -73, -22, -19, 17,  19,
// -19,
// //     -18, -19, 21,  -78, -19, 74,  73,  -17, -17, -79, -78, -77, 74,  -74,
// //     -75, -76, -17, 26,  23, 24, -26, 27,  71,  72,  22,  -25, 75,  70, 26,
// //     75,  -28, 26,  -23, 25,  75,  -26, -24, -25, -22, 75,  74,  -21, -25,
// 23,
// //     -23, 23,  -73, -25, 22,  -76, -73, -20, -73, 20,  -20, -24, -76, 74,
// -72,
// //     -24, -23, -74, 74,  -23, -73, -25, 72,  -74, -74, 21,  20,  -78, -73,
// 21,
// //     -74, 75,  -23, -73, -21, -73, 72,  -19, -76, 76,  76,  19, -76, 17,
// 74,
// //     76,  18,  18,  16,  77,  -18, 71,  -77, -75, 79,  15,  -78, -76, -77,
// 75,
// //     -77, -16, -76, -77, 75,  75, -76, -16, 15,  77,  -16, 76,  -18, 17,
// -75,
// //     15,  -17, -77, 74,  73,  76,  -17, -78, -13, 13,  15,  11,  73, -15,
// -17,
// //     76, -75, 74,  3,   -10, -15, 78,  -75, -12, 15,  -78, -13, 10,  75, 9,
// //     -76, -11, 14,  -77, -78, 14,  -79, 73,  75, -77, 77,  78,  80,  -80,
// 77,
// //     -12, 11,  -10, -76, -11, -9,  76,  -12, 7,   7,   5,   8,   -10, 9,
// 74,
// //     9,   -10, 79,  -78, 76,  76,  80,  -77, 6,   -8,  -7,  78,  78,  6,
// 77,
// //     -75, 75,  -77, 76,  -77, -4,  75,  75, 73,  1, -5,  -5,  75,  74, -77,
// //     -75, -7,  5,   -5,  -6,  6,   -77, 76,  -4,  0,   4,   -3,  2,   73,
// 78,
// //     76, -6,  1, 1,   -3,  -4,  76,  -79, -76, 78,  79,  77,  78,  4,   -3,
// //     -77, -1,  -78, -1,  78,  -78, 80,  74,  4, -2,  79, -79, -77, 1,   76,
// 2,
// //     -1,  -2};
// // char input_dmrs_real[144] = {-91, 90,  90,  90,  90,  -91, 90,  90,  90,
// -91,
// // -91, 90,  -91, -91, -91, -91, 90, -91,
// //                              90,  90,  -91, 90,  90,  90,  90,  90,  90,
// -91,
// //                              90,  90,  -91, -91, -91, 90,  -91, 90, -91,
// 90,
// //                              90,  90,  90,  90,  90,  90,  -91, 90,  -91,
// 90,
// //                              90,  90,  90,  -91, 90,  90, 90,  -91, 90,
// 90,
// //                              90,  90,  90,  90,  -91, 90,  -91, -91, 90,
// -91,
// //                              90,  -91, -91, -91, 90,  -91, -91, -91, 90,
// -91,
// //                              90,  -91, 90,  90,  -91, -91, 90,  90,  -91,
// //                              -91, 90, -91, -91, 90,  90,  90,  -91, 90,
// -91,
// //                              90,  90,  90,  -91, 90,  -91, -91, 90,  90,
// -91,
// //                              -91, -91, 90,  90,  -91, 90,  -91, 90,  90,
// -91,
// //                              90,  90,  -91, -91, 90,  -91, 90,  90, -91,
// -91,
// //                              -91, -91, -91, -91, -91, 90,  -91, -91, 90,
// -91,
// //                              -91, -91, 90,  90,  -91, -91, -91};
// // char input_dmrs_imag[144] = {90,  90,  -91, 90,  -91, 90,  -91, 90,  -91,
// 90,
// // -91, -91, -91, -91, 90, -91, -91, 90,
// //                              -91, 90,  90,  90,  -91, 90,  90,  90,  -91,
// 90,
// //                              -91, 90,  -91, -91, 90, 90,  -91, -91, 90,
// 90,
// //                              -91, 90,  -91, -91, -91, 90,  -91, 90,  -91,
// //                              -91, -91, 90,  90, -91, -91, 90, -91, -91,
// -91,
// //                              90,  90,  -91, -91, 90,  -91, -91, 90,  -91,
// 90,
// //                              90,  90, -91, 90,  90, 90,  90,  -91, 90,
// -91,
// //                              90,  90,  90,  -91, 90,  -91, -91, -91, -91,
// 90,
// //                              -91, -91, 90, 90,  -91, 90,  -91, -91, 90,
// 90,
// //                              -91, -91, 90,  90,  -91, -91, -91, 90, 90,
// 90,
// //                              -91, -91, -91, 90,  90,  -91, 90,  -91, 90,
// 90,
// //                              90,  90,  -91, -91, -91, 90, -91, -91, -91,
// -91,
// //                              90,  -91, -91, -91, 90,  90,  90,  90,  -91,
// 90,
// //                              90,  -91, -91, 90, -91, -91, -91};
// short input_dmrs_index[144] = {
//     2,   6,   10,  14,  18,  22,  26,  30,  34,  38,  42,  46,  50,  54,  58,
//     62,  66,  70,  74,  78,  82,  86,  90,  94,  98,  102, 106, 110, 114,
//     118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 158, 162, 166, 170,
//     174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214, 218, 222, 226,
//     230, 234, 238, 242, 246, 250, 254, 258, 262, 266, 270, 274, 278, 282,
//     286, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482,
//     486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 538,
//     542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 594,
//     598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650,
//     654, 658, 662, 666, 670, 674, 678, 682, 686, 690, 694, 698, 702, 706,
//     710, 714, 718};

// // short input_dmrs_index[144] = {
// //     0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,  48,  52,
// 56,
// //     60,  64,  68,  72,  76,  80, 84,  88,  92,  96,  100, 104, 108, 112,
// 116,
// //     120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172,
// //     176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228,
// //     232, 236, 0,   4,   8, 12,  16,  20,  24,  28,  32,  36,  40,  44,
// 192,
// //     196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 0,   4,   8,
// 12,
// //     16,  20,  24,  28,  32,  36,  40,  44,  48,  52,  56,  60,  64,  68,
// 72,
// //     76,  80, 84,  88,  92,  96,  100, 104, 108, 112, 116, 120, 124, 128,
// 132,
// //     136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188,
// //     192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236};
// char input_coef_h[4096] = {
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3,
//     0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3};
VENUS_INLINE __v4096i8
nrPRBS(__v4096i8 seq1_vec, __v4096i8 init2_vec, __v2048i16 seq2_init_table_0_vec, __v2048i16 seq2_init_table_1_vec,
       __v2048i16 seq2_init_table_2_vec, __v2048i16 seq2_init_table_3_vec, __v2048i16 seq2_init_table_4_vec,
       __v2048i16 seq2_init_table_5_vec, __v2048i16 seq2_init_table_6_vec, __v2048i16 seq2_init_table_7_vec,
       __v2048i16 seq2_init_table_8_vec, __v2048i16 seq2_init_table_9_vec, __v2048i16 seq2_init_table_10_vec,
       __v2048i16 seq2_init_table_11_vec, __v2048i16 seq2_init_table_12_vec, __v2048i16 seq2_init_table_13_vec,
       __v2048i16 seq2_init_table_14_vec, __v2048i16 seq2_init_table_15_vec, __v2048i16 seq2_init_table_16_vec,
       __v2048i16 seq2_init_table_17_vec, __v2048i16 seq2_init_table_18_vec, __v2048i16 seq2_init_table_19_vec,
       __v2048i16 seq2_trans_table_0_vec, __v2048i16 seq2_trans_table_1_vec, __v2048i16 seq2_trans_table_2_vec,
       __v2048i16 seq2_trans_table_3_vec, __v2048i16 seq2_trans_table_4_vec, __v2048i16 seq2_trans_table_5_vec,
       __v2048i16 seq2_trans_table_6_vec, int sequenceLength) {
  /*--------------------DMRS GENERATION--------------------*/
  // gengrate init 31 seq
  __v4096i8 seq2_init_table_0_tmp;
  vclaim(seq2_init_table_0_tmp);
  vshuffle(seq2_init_table_0_tmp, seq2_init_table_0_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_1_tmp;
  vclaim(seq2_init_table_1_tmp);
  vshuffle(seq2_init_table_1_tmp, seq2_init_table_1_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_2_tmp;
  vclaim(seq2_init_table_2_tmp);
  vshuffle(seq2_init_table_2_tmp, seq2_init_table_2_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_3_tmp;
  vclaim(seq2_init_table_3_tmp);
  vshuffle(seq2_init_table_3_tmp, seq2_init_table_3_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_4_tmp;
  vclaim(seq2_init_table_4_tmp);
  vshuffle(seq2_init_table_4_tmp, seq2_init_table_4_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_5_tmp;
  vclaim(seq2_init_table_5_tmp);
  vshuffle(seq2_init_table_5_tmp, seq2_init_table_5_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_6_tmp;
  vclaim(seq2_init_table_6_tmp);
  vshuffle(seq2_init_table_6_tmp, seq2_init_table_6_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_7_tmp;
  vclaim(seq2_init_table_7_tmp);
  vshuffle(seq2_init_table_7_tmp, seq2_init_table_7_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_8_tmp;
  vclaim(seq2_init_table_8_tmp);
  vshuffle(seq2_init_table_8_tmp, seq2_init_table_8_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_9_tmp;
  vclaim(seq2_init_table_9_tmp);
  vshuffle(seq2_init_table_9_tmp, seq2_init_table_9_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_10_tmp;
  vclaim(seq2_init_table_10_tmp);
  vshuffle(seq2_init_table_10_tmp, seq2_init_table_10_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_11_tmp;
  vclaim(seq2_init_table_11_tmp);
  vshuffle(seq2_init_table_11_tmp, seq2_init_table_11_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_12_tmp;
  vclaim(seq2_init_table_12_tmp);
  vshuffle(seq2_init_table_12_tmp, seq2_init_table_12_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_13_tmp;
  vclaim(seq2_init_table_13_tmp);
  vshuffle(seq2_init_table_13_tmp, seq2_init_table_13_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_14_tmp;
  vclaim(seq2_init_table_14_tmp);
  vshuffle(seq2_init_table_14_tmp, seq2_init_table_14_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_15_tmp;
  vclaim(seq2_init_table_15_tmp);
  vshuffle(seq2_init_table_15_tmp, seq2_init_table_15_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_16_tmp;
  vclaim(seq2_init_table_16_tmp);
  vshuffle(seq2_init_table_16_tmp, seq2_init_table_16_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_17_tmp;
  vclaim(seq2_init_table_17_tmp);
  vshuffle(seq2_init_table_17_tmp, seq2_init_table_17_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_18_tmp;
  vclaim(seq2_init_table_18_tmp);
  vshuffle(seq2_init_table_18_tmp, seq2_init_table_18_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_init_table_19_tmp;
  vclaim(seq2_init_table_19_tmp);
  vshuffle(seq2_init_table_19_tmp, seq2_init_table_19_vec, init2_vec, SHUFFLE_GATHER, tabLength);
  __v4096i8 seq2_tmp;
  vclaim(seq2_tmp);
  vbrdcst(seq2_tmp, 0, MASKREAD_OFF, tabLength + 1);
  seq2_tmp = vxor(seq2_init_table_0_tmp, seq2_init_table_1_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_2_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_3_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_4_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_5_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_6_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_7_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_8_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_9_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_10_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_11_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_12_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_13_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_14_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_15_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_16_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_17_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_18_tmp, MASKREAD_OFF, tabLength);
  seq2_tmp = vxor(seq2_tmp, seq2_init_table_19_tmp, MASKREAD_OFF, tabLength);

  __v2048i16 seq2_shuffle_index;
  vclaim(seq2_shuffle_index);
  vrange(seq2_shuffle_index, tabLength);

  __v4096i8 seq2_vec;
  vclaim(seq2_vec);
  vshuffle(seq2_vec, seq2_shuffle_index, seq2_tmp, SHUFFLE_SCATTER, tabLength);

  // gengrate the rest seqs
  __v4096i8 seq2_trans_0_tmp;
  __v4096i8 seq2_trans_1_tmp;
  __v4096i8 seq2_trans_2_tmp;
  __v4096i8 seq2_trans_3_tmp;
  __v4096i8 seq2_trans_4_tmp;
  __v4096i8 seq2_trans_5_tmp;
  __v4096i8 seq2_trans_6_tmp;
  vclaim(seq2_trans_0_tmp);
  vclaim(seq2_trans_1_tmp);
  vclaim(seq2_trans_2_tmp);
  vclaim(seq2_trans_3_tmp);
  vclaim(seq2_trans_4_tmp);
  vclaim(seq2_trans_5_tmp);
  vclaim(seq2_trans_6_tmp);

  for (int i = 1; i < ((sequenceLength + tabLength - 1) / tabLength); i++) {
    vshuffle(seq2_trans_0_tmp, seq2_trans_table_0_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vshuffle(seq2_trans_1_tmp, seq2_trans_table_1_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vshuffle(seq2_trans_2_tmp, seq2_trans_table_2_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vshuffle(seq2_trans_3_tmp, seq2_trans_table_3_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vshuffle(seq2_trans_4_tmp, seq2_trans_table_4_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vshuffle(seq2_trans_5_tmp, seq2_trans_table_5_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vshuffle(seq2_trans_6_tmp, seq2_trans_table_6_vec, seq2_tmp, SHUFFLE_GATHER, tabLength);
    vbrdcst(seq2_tmp, 0, MASKREAD_OFF, tabLength);
    seq2_tmp           = vxor(seq2_trans_0_tmp, seq2_trans_1_tmp, MASKREAD_OFF, tabLength);
    seq2_tmp           = vxor(seq2_tmp, seq2_trans_2_tmp, MASKREAD_OFF, tabLength);
    seq2_tmp           = vxor(seq2_tmp, seq2_trans_3_tmp, MASKREAD_OFF, tabLength);
    seq2_tmp           = vxor(seq2_tmp, seq2_trans_4_tmp, MASKREAD_OFF, tabLength);
    seq2_tmp           = vxor(seq2_tmp, seq2_trans_5_tmp, MASKREAD_OFF, tabLength);
    seq2_tmp           = vxor(seq2_tmp, seq2_trans_6_tmp, MASKREAD_OFF, tabLength);
    seq2_shuffle_index = vsadd(seq2_shuffle_index, tabLength, MASKREAD_OFF, tabLength);
    vshuffle(seq2_vec, seq2_shuffle_index, seq2_tmp, SHUFFLE_SCATTER, tabLength);
  }

  // generate dmrs
  __v4096i8 seq;
  seq = vxor(seq1_vec, seq2_vec, MASKREAD_OFF, sequenceLength);
  seq = vmul(seq, -2, MASKREAD_OFF, sequenceLength);
  seq = vsadd(seq, 1, MASKREAD_OFF, sequenceLength);
  // seq = vaddmul(seq, -2, 1, MASKREAD_OFF, sequenceLength);
  return seq;
}

int64_t dmrsEst[8] = {0};

typedef struct {
  short data;
} __attribute__((aligned(64))) short_struct;

int Task_iBar_SSB_Search(
    __v4096i8 seq1_vec, __v2048i16 seq2_init_table_0_vec, __v2048i16 seq2_init_table_1_vec,
    __v2048i16 seq2_init_table_2_vec, __v2048i16 seq2_init_table_3_vec, __v2048i16 seq2_init_table_4_vec,
    __v2048i16 seq2_init_table_5_vec, __v2048i16 seq2_init_table_6_vec, __v2048i16 seq2_init_table_7_vec,
    __v2048i16 seq2_init_table_8_vec, __v2048i16 seq2_init_table_9_vec, __v2048i16 seq2_init_table_10_vec,
    __v2048i16 seq2_init_table_11_vec, __v2048i16 seq2_init_table_12_vec, __v2048i16 seq2_init_table_13_vec,
    __v2048i16 seq2_init_table_14_vec, __v2048i16 seq2_init_table_15_vec, __v2048i16 seq2_init_table_16_vec,
    __v2048i16 seq2_init_table_17_vec, __v2048i16 seq2_init_table_18_vec, __v2048i16 seq2_init_table_19_vec,
    __v2048i16 seq2_trans_table_0_vec, __v2048i16 seq2_trans_table_1_vec, __v2048i16 seq2_trans_table_2_vec,
    __v2048i16 seq2_trans_table_3_vec, __v2048i16 seq2_trans_table_4_vec, __v2048i16 seq2_trans_table_5_vec,
    __v2048i16 seq2_trans_table_6_vec, short_struct input_ncellid, __v4096i8 rxData_real0, __v4096i8 rxData_imag0,
    __v2048i16 dmrs_index, __v2048i16 rxData_shuffle_index, short_struct input_Lmax) {

  int       fractionLength = 7;
  int       dmrsRefLength  = 144;
  short     ncellid        = input_ncellid.data;
  short     Lmax           = input_Lmax.data;
  int       maxSSB         = 0;
  int       maxSSBIndex    = 0;
  __v4096i8 rxData_real;
  __v4096i8 rxData_imag;
  vclaim(rxData_real);
  vclaim(rxData_imag);
  vshuffle(rxData_real, rxData_shuffle_index, rxData_real0, SHUFFLE_GATHER, 720);
  vshuffle(rxData_imag, rxData_shuffle_index, rxData_imag0, SHUFFLE_GATHER, 720);

  for (size_t ibar_SSB = 0; ibar_SSB <= Lmax; ibar_SSB++) {

    // nrPBCHDMRS
    unsigned int cinit = (1 << 11) * (ibar_SSB + 1) * ((ncellid / 4) + 1) + (1 << 6) * (ibar_SSB + 1) + (ncellid % 4);
    __v4096i8    init;
    vclaim(init);
    vbrdcst(init, 0, MASKREAD_OFF, 32);
    vbarrier();
    VSPM_OPEN();
    int init_addr = vaddr(init);
    for (int i = 0; i < 31; ++i) {
      *(volatile char *)(init_addr + i) = cinit & 0b1;
      cinit                             = cinit >> 1;
    }
    VSPM_CLOSE();
    // input parameters: cinit(need ibar_SSB and ncellid)
    int       sequenceLength = dmrsRefLength * 2;
    __v4096i8 seq;
    seq = nrPRBS(seq1_vec, init, seq2_init_table_0_vec, seq2_init_table_1_vec, seq2_init_table_2_vec,
                 seq2_init_table_3_vec, seq2_init_table_4_vec, seq2_init_table_5_vec, seq2_init_table_6_vec,
                 seq2_init_table_7_vec, seq2_init_table_8_vec, seq2_init_table_9_vec, seq2_init_table_10_vec,
                 seq2_init_table_11_vec, seq2_init_table_12_vec, seq2_init_table_13_vec, seq2_init_table_14_vec,
                 seq2_init_table_15_vec, seq2_init_table_16_vec, seq2_init_table_17_vec, seq2_init_table_18_vec,
                 seq2_init_table_19_vec, seq2_trans_table_0_vec, seq2_trans_table_1_vec, seq2_trans_table_2_vec,
                 seq2_trans_table_3_vec, seq2_trans_table_4_vec, seq2_trans_table_5_vec, seq2_trans_table_6_vec,
                 sequenceLength);
    __v2048i16 dmrs_shuffle_index;
    vclaim(dmrs_shuffle_index);
    vrange(dmrs_shuffle_index, dmrsRefLength);
    dmrs_shuffle_index = vmul(dmrs_shuffle_index, 2, MASKREAD_OFF, dmrsRefLength);
    __v4096i8 dmrs_real;
    vclaim(dmrs_real);
    vshuffle(dmrs_real, dmrs_shuffle_index, seq, SHUFFLE_GATHER, dmrsRefLength);
    dmrs_real          = vmul(dmrs_real, (int)(recpSqrt2 * (1 << fractionLength)), MASKREAD_OFF, dmrsRefLength);
    dmrs_shuffle_index = vsadd(dmrs_shuffle_index, 1, MASKREAD_OFF, dmrsRefLength);
    __v4096i8 dmrs_imag;
    vclaim(dmrs_imag);
    vshuffle(dmrs_imag, dmrs_shuffle_index, seq, SHUFFLE_GATHER, dmrsRefLength);
    dmrs_imag = vmul(dmrs_imag, (int)(recpSqrt2 * (1 << fractionLength)), MASKREAD_OFF, dmrsRefLength);

    // dmrs correlation

    __v4096i8 dmrsRx_real_vec;
    __v4096i8 dmrsRx_imag_vec;
    vclaim(dmrsRx_real_vec);
    vclaim(dmrsRx_imag_vec);
    vshuffle(dmrsRx_real_vec, dmrs_index, rxData_real, SHUFFLE_GATHER, dmrsRefLength);
    vshuffle(dmrsRx_imag_vec, dmrs_index, rxData_imag, SHUFFLE_GATHER, dmrsRefLength);

    /* dmrs互相关 */
    __v4096i8 dmrsEst_real_vec_part1;
    __v4096i8 dmrsEst_real_vec_part2;
    __v4096i8 dmrsEst_imag_vec_part1;
    __v4096i8 dmrsEst_imag_vec_part2;
    vsetshamt(fractionLength);
    dmrsEst_real_vec_part1 = vmul(dmrsRx_real_vec, dmrs_real, MASKREAD_OFF, dmrsRefLength);
    dmrsEst_real_vec_part2 = vmul(dmrsRx_imag_vec, dmrs_imag, MASKREAD_OFF, dmrsRefLength);
    dmrsEst_imag_vec_part1 = vmul(dmrsRx_real_vec, dmrs_imag, MASKREAD_OFF, dmrsRefLength);
    dmrsEst_imag_vec_part2 = vmul(dmrsRx_imag_vec, dmrs_real, MASKREAD_OFF, dmrsRefLength);
    vsetshamt(0);

    __v4096i8 dmrsEst_real_vec;
    __v4096i8 dmrsEst_imag_vec;

    dmrsEst_real_vec = vsadd(dmrsEst_real_vec_part1, dmrsEst_real_vec_part2, MASKREAD_OFF, dmrsRefLength);
    dmrsEst_imag_vec = vssub(dmrsEst_imag_vec_part1, dmrsEst_imag_vec_part2, MASKREAD_OFF, dmrsRefLength);
    __v4096i8 dmrsEst_mean_real;
    __v4096i8 dmrsEst_mean_imag;
    vclaim(dmrsEst_mean_real);
    vclaim(dmrsEst_mean_imag);
    vbrdcst(dmrsEst_mean_real, 0, MASKREAD_OFF, dmrsRefLength);
    vbrdcst(dmrsEst_mean_imag, 0, MASKREAD_OFF, dmrsRefLength);
    dmrsEst_mean_real              = vredsum(dmrsEst_real_vec, MASKREAD_OFF, dmrsRefLength);
    dmrsEst_mean_imag              = vredsum(dmrsEst_imag_vec, MASKREAD_OFF, dmrsRefLength);
    int32_t dmrsEst_tmp            = 0;
    int     dmrsEst_mean_real_addr = vaddr(dmrsEst_mean_real);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp = ((*(volatile char *)(dmrsEst_mean_real_addr)) & 0xFF);
    VSPM_CLOSE();
    dmrsEst_mean_real_addr = vaddr(dmrsEst_mean_real);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp += (((*(volatile char *)(dmrsEst_mean_real_addr + 1)) & 0xFF) << 8);
    VSPM_CLOSE();
    dmrsEst_mean_real_addr = vaddr(dmrsEst_mean_real);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp += (((*(volatile char *)(dmrsEst_mean_real_addr + 2)) & 0xFF) << 16);
    VSPM_CLOSE();
    dmrsEst_mean_real_addr = vaddr(dmrsEst_mean_real);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp += (((*(volatile char *)(dmrsEst_mean_real_addr + 3)) & 0xFF) << 24);
    VSPM_CLOSE();
    if (dmrsEst_tmp == INT32_MIN) {
      dmrsEst[ibar_SSB] = INT32_MAX;
    } else {
      dmrsEst[ibar_SSB] = dmrsEst_tmp > 0 ? dmrsEst_tmp : -dmrsEst_tmp;
    }
    // printf("dmrsEst:%hd\n", &dmrsEst_tmp);
    // printf("dmrsEst_tmp:%hd\n", &dmrsEst_tmp);
    int dmrsEst_mean_imag_addr = vaddr(dmrsEst_mean_imag);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp = ((*(volatile char *)(dmrsEst_mean_imag_addr)) & 0xFF);
    VSPM_CLOSE();
    dmrsEst_mean_imag_addr = vaddr(dmrsEst_mean_imag);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp += (((*(volatile char *)(dmrsEst_mean_imag_addr + 1)) & 0xFF) << 8);
    VSPM_CLOSE();
    dmrsEst_mean_imag_addr = vaddr(dmrsEst_mean_imag);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp += (((*(volatile char *)(dmrsEst_mean_imag_addr + 2)) & 0xFF) << 16);
    VSPM_CLOSE();
    dmrsEst_mean_imag_addr = vaddr(dmrsEst_mean_imag);
    vbarrier();
    VSPM_OPEN();
    dmrsEst_tmp += (((*(volatile char *)(dmrsEst_mean_imag_addr + 3)) & 0xFF) << 24);
    VSPM_CLOSE();
    // printf("dmrsEst:%hd\n", &dmrsEst_tmp);
    if (dmrsEst_tmp == INT32_MIN) {
      dmrsEst[ibar_SSB] += INT32_MAX;
    } else {
      dmrsEst[ibar_SSB] += dmrsEst_tmp > 0 ? dmrsEst_tmp : -dmrsEst_tmp;
    }
    maxSSBIndex = dmrsEst[ibar_SSB] > maxSSB ? ibar_SSB : maxSSBIndex;
    maxSSB      = dmrsEst[ibar_SSB] > maxSSB ? dmrsEst[ibar_SSB] : maxSSB;
    // printf("dmrsEst_tmp:%hd\n", &dmrsEst_tmp);
    // printf("dmrsEst:%d\n", &dmrsEst[ibar_SSB]);
  }

  // return output
  short_struct iBar_SSB;
  iBar_SSB.data = maxSSBIndex;
  vreturn(&iBar_SSB, sizeof(iBar_SSB));
}