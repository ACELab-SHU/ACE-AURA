
/**
 * ****************************************
 * @file        Task_SSBMeasurements.c
 * @brief       caculate RSRP & RSRQ & RSSI
 * @author      yuanfeng
 * @date        2024.7.1
 * @copyright   ACE-Lab(Shanghai University)
 * ****************************************
 */

#include "riscv_printf.h"
#include "venus.h"

typedef short __v4096i16 __attribute__((ext_vector_type(4096)));
typedef short __v2048i16 __attribute__((ext_vector_type(2048)));
typedef short __v4096i8 __attribute__((ext_vector_type(4096)));

#define LN10     2.3025850929940456840179914546844
#define ACCURACY 0.0000000001

VENUS_INLINE double pow_(double num, int power) {
  if (power == 0)
    return 1.0;

  for (int i = 1; i < power; i++)
    num *= num;

  return num;
}

VENUS_INLINE double sqrt_(double n) {
  double low, high, mid, tmp;

  if (n > 1) {
    low  = 1;
    high = n;
  } else {
    low  = n;
    high = 1;
  }

  while (low <= high) {
    mid = (low + high) / 2.000;

    tmp = mid * mid;

    if (tmp - n <= ACCURACY && tmp - n >= ACCURACY * -1)
      return mid;
    else if (tmp > n)
      high = mid;
    else
      low = mid;
  }

  return -1.000;
}

VENUS_INLINE double NegativeLog(double q) {
  int    p;
  double pi2  = 6.283185307179586476925286766559;
  double eps2 = 0.00000000000001; // 1e-14
  double eps1;                    // 1e-28
  double r = q, s = q, n = q, q2 = q * q, q1 = q2 * q;

  eps1 = eps2 * eps2;

  for (p = 1; (n *= q1) > eps1; s += n, q1 *= q2)
    r += (p = !p) ? n : -n;

  double u = 1 - 2 * r, v = 1 + 2 * s, t = u / v;
  double a = 1, b = sqrt_(1 - t * t * t * t);

  for (; a - b > eps2; b = sqrt_(a * b), a = t)
    t = (a + b) / 2;

  return pi2 / (a + b) / v / v;
}

VENUS_INLINE double Log(double x) {
  int k = 0;

  if (x <= 0)
    return -1;
  if (x == 1)
    return 0;

  for (; x > 0.1; k++)
    x /= 10;
  for (; x <= 0.01; k--)
    x *= 10;

  return k * LN10 - NegativeLog(x);
}

VENUS_INLINE double Log10(double x) { return Log(x) / LN10; }

int Task_nrSSBMeasurements(__v4096i8 ssblock_real, __v4096i8 ssblock_imag, __v4096i8 sssRx_real, __v4096i8 sssRx_imag,
                           __v4096i8 refSSS, __v2048i16 pbchDMRSInd, __v4096i8 refPBCHDMRS) {

  // RSSI - Linear average of power per OFDM Symbol
  double    RSSI                 = 0;
  __v4096i8 ssblock_real_tmp     = vmul(ssblock_real, ssblock_real, MASKREAD_OFF, 240 * 3);
  __v4096i8 ssblock_imag_tmp     = vmul(ssblock_imag, ssblock_imag, MASKREAD_OFF, 240 * 3);
  __v4096i8 ssblock_sum_tmp      = vredsum(ssblock_real_tmp, MASKREAD_OFF, 240 * 3);
  int       ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI = ((*(volatile char *)(ssblock_sum_tmp_addr)) & 0xFF);
  VSPM_CLOSE();
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += (((*(volatile char *)(ssblock_sum_tmp_addr + 1)) & 0xFF) << 8);
  VSPM_CLOSE();
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += (((*(volatile char *)(ssblock_sum_tmp_addr + 2)) & 0xFF) << 16);
  VSPM_CLOSE();
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += (((*(volatile char *)(ssblock_sum_tmp_addr + 3)) & 0xFF) << 24);
  VSPM_CLOSE();

  ssblock_sum_tmp      = vredsum(ssblock_imag_tmp, MASKREAD_OFF, 240 * 3);
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += ((*(volatile char *)(ssblock_sum_tmp_addr)) & 0xFF);
  VSPM_CLOSE();
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += (((*(volatile char *)(ssblock_sum_tmp_addr + 1)) & 0xFF) << 8);
  VSPM_CLOSE();
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += (((*(volatile char *)(ssblock_sum_tmp_addr + 2)) & 0xFF) << 16);
  VSPM_CLOSE();
  ssblock_sum_tmp_addr = vaddr(ssblock_sum_tmp);
  vbarrier();
  VSPM_OPEN();
  RSSI += (((*(volatile char *)(ssblock_sum_tmp_addr + 3)) & 0xFF) << 24);
  VSPM_CLOSE();

  RSSI = RSSI / 3;

  // RSRP - Use reference symbols to get most accurate power readings
  double    RSRP             = 0;
  __v4096i8 sss_real_tmp     = vmul(sssRx_real, refSSS, MASKREAD_OFF, 127);
  __v4096i8 sss_imag_tmp     = vmul(sssRx_imag, refSSS, MASKREAD_OFF, 127);
  __v4096i8 sss_sum_real_tmp = vredsum(sss_real_tmp, MASKREAD_OFF, 127);
  __v4096i8 sss_sum_imag_tmp = vredsum(sss_imag_tmp, MASKREAD_OFF, 127);

  double RSRP_real             = 0;
  int    sss_sum_real_tmp_addr = vaddr(sss_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real = ((*(volatile char *)(sss_sum_real_tmp_addr)) & 0xFF);
  VSPM_CLOSE();
  sss_sum_real_tmp_addr = vaddr(sss_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real += (((*(volatile char *)(sss_sum_real_tmp_addr + 1)) & 0xFF) << 8);
  VSPM_CLOSE();
  sss_sum_real_tmp_addr = vaddr(sss_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real += (((*(volatile char *)(sss_sum_real_tmp_addr + 2)) & 0xFF) << 16);
  VSPM_CLOSE();
  sss_sum_real_tmp_addr = vaddr(sss_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real += (((*(volatile char *)(sss_sum_real_tmp_addr + 3)) & 0xFF) << 24);
  VSPM_CLOSE();
  RSRP_real = RSRP_real / 127;

  double RSRP_imag             = 0;
  int    sss_sum_imag_tmp_addr = vaddr(sss_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_imag = ((*(volatile char *)(sss_sum_imag_tmp_addr)) & 0xFF);
  VSPM_CLOSE();
  sss_sum_imag_tmp_addr = vaddr(sss_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_imag += (((*(volatile char *)(sss_sum_imag_tmp_addr + 1)) & 0xFF) << 8);
  VSPM_CLOSE();
  sss_sum_imag_tmp_addr = vaddr(sss_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_imag += (((*(volatile char *)(sss_sum_real_tmp_addr + 2)) & 0xFF) << 16);
  VSPM_CLOSE();
  sss_sum_imag_tmp_addr = vaddr(sss_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_imag += (((*(volatile char *)(sss_sum_imag_tmp_addr + 3)) & 0xFF) << 24);
  VSPM_CLOSE();
  RSRP_imag = RSRP_imag / 127;

  RSRP = RSRP_real * RSRP_real + RSRP_imag * RSRP_imag;

  double    rsrpDMRS = 0;
  __v4096i8 dmrsRx_real;
  __v4096i8 dmrsRx_imag;
  vclaim(dmrsRx_real);
  vclaim(dmrsRx_imag);
  vshuffle(dmrsRx_real, pbchDMRSInd, ssblock_real, SHUFFLE_GATHER, 144);
  vshuffle(dmrsRx_imag, pbchDMRSInd, ssblock_imag, SHUFFLE_GATHER, 144);
  __v4096i8 dmrs_real_tmp     = vmul(dmrsRx_real, refPBCHDMRS, MASKREAD_OFF, 144);
  __v4096i8 dmrs_imag_tmp     = vmul(dmrsRx_imag, refPBCHDMRS, MASKREAD_OFF, 144);
  __v4096i8 dmrs_sum_real_tmp = vredsum(dmrs_real_tmp, MASKREAD_OFF, 144);
  __v4096i8 dmrs_sum_imag_tmp = vredsum(dmrs_imag_tmp, MASKREAD_OFF, 144);

  double rsrpDMRS_real          = 0;
  int    dmrs_sum_real_tmp_addr = vaddr(dmrs_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real = ((*(volatile char *)(dmrs_sum_real_tmp_addr)) & 0xFF);
  VSPM_CLOSE();
  dmrs_sum_real_tmp_addr = vaddr(dmrs_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real += (((*(volatile char *)(dmrs_sum_real_tmp_addr + 1)) & 0xFF) << 8);
  VSPM_CLOSE();
  dmrs_sum_real_tmp_addr = vaddr(dmrs_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real += (((*(volatile char *)(dmrs_sum_real_tmp_addr + 2)) & 0xFF) << 16);
  VSPM_CLOSE();
  dmrs_sum_real_tmp_addr = vaddr(dmrs_sum_real_tmp);
  vbarrier();
  VSPM_OPEN();
  RSRP_real += (((*(volatile char *)(dmrs_sum_real_tmp_addr + 3)) & 0xFF) << 24);
  VSPM_CLOSE();
  rsrpDMRS_real = rsrpDMRS_real / 144;

  double rsrpDMRS_imag          = 0;
  int    dmrs_sum_imag_tmp_addr = vaddr(dmrs_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  rsrpDMRS_imag = ((*(volatile char *)(dmrs_sum_imag_tmp_addr)) & 0xFF);
  VSPM_CLOSE();
  dmrs_sum_imag_tmp_addr = vaddr(dmrs_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  rsrpDMRS_imag += (((*(volatile char *)(dmrs_sum_imag_tmp_addr + 1)) & 0xFF) << 8);
  VSPM_CLOSE();
  dmrs_sum_imag_tmp_addr = vaddr(dmrs_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  rsrpDMRS_imag += (((*(volatile char *)(dmrs_sum_real_tmp_addr + 2)) & 0xFF) << 16);
  VSPM_CLOSE();
  dmrs_sum_imag_tmp_addr = vaddr(dmrs_sum_imag_tmp);
  vbarrier();
  VSPM_OPEN();
  rsrpDMRS_imag += (((*(volatile char *)(dmrs_sum_imag_tmp_addr + 3)) & 0xFF) << 24);
  VSPM_CLOSE();
  rsrpDMRS_imag = rsrpDMRS_imag / 144;

  rsrpDMRS = rsrpDMRS_real * rsrpDMRS_real + rsrpDMRS_imag * rsrpDMRS_imag;

  RSRP = (RSRP * 127 + rsrpDMRS * 144) / (127 + 144);

  // RSRQ = N*RSRP/RSSI, where N is the number of resource blocks used in the RSSI measurement. For an SS block, N will
  // always be 20.
  double RSRQ = 20 * RSRP / RSSI;

  int RSRP_dB = 10 * Log10(RSRP) + 30;
  int RSSI_dB = 10 * Log10(RSSI) + 30;
  int RSRQ_dB = 10 * Log10(RSRQ);
}
